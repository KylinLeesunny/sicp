#lang racket
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? leaf)
  (eq? (car leaf) 'leaf))
(define (symbol-leaf leaf)
  (cadr leaf))
(define (weight-leaf leaf)
  (caddr leaf))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree)
  (car tree))
(define (right-branch tree)
  (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (decode bits tree)
  (define (decode-1 bits current-tree)
    (if (null? bits)
        '()
        (let ((next-branch (choose-branch (car bits) current-tree)))
          (cond ((leaf? next-branch) (cons (symbol-leaf next-branch)
                                            (decode-1 (cdr bits) tree)))
                (else (decode-1 (cdr bits) next-branch))))))
  (define (choose-branch bit branch)
    (cond ((= bit 0) (left-branch branch))
          ((= bit 1) (right-branch branch))
          (else (error "bad bit"))))
  (decode-1 bits tree))
(define (adjoin-set x set)
  (if (null? set)
      (list x)
      (if (< (weight x) (weight (car set)))
          (cons x set)
          (cons (car set) (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                             (cadr pair))
                  (make-leaf-set (cdr pairs))))))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol symbol tree)
  (cond ((not (in-tree? symbol tree)) (error "符号错误"))
        ((leaf? tree) '())
        (else (if (in-tree? symbol (left-branch tree))
                  (cons 0 (encode-symbol symbol (left-branch tree)))
                  (cons 1 (encode-symbol symbol (right-branch tree)))))))
(define (in-tree? symbol tree)
  (define (in-tree-inner symbols-list)
     (cond ((null? symbols-list) #f)
           ((eq? (car symbols-list) symbol) #t)
           (else (in-tree-inner (cdr symbols-list)))))
  (let ((syms (symbols tree)))
      (in-tree-inner syms)))
(define (generate-huffman-tree pairs)
  (define (successive-merge ordered-set)
    (cond ((= 0 (length ordered-set))
            '())
          ((= 1 (length ordered-set))
            (car ordered-set))
          (else
            (let ((new-sub-tree (make-code-tree (car ordered-set)
                                                (cadr ordered-set)))
                  (remained-ordered-set (cddr ordered-set)))
                (successive-merge (adjoin-set new-sub-tree remained-ordered-set))))))
  (successive-merge (make-leaf-set pairs)))
(define symbol-frequency
  '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1)))
(define mytree
  (generate-huffman-tree symbol-frequency))
(symbols mytree)
(encode '(NA YIP) mytree)
(decode '(0 1 0) mytree)

                  
      